name: Production

# https://json.schemastore.org/github-workflow.json
# 执行 CI 的时机: 当 git push 到 master 分支时
on:
  push:
    branches:
      - main

# 执行所有的 jobs
jobs:
  deploy:
    # 该 Job 在自建的 Runner 中执行
    # https://docs.github.com/cn/actions/hosting-your-own-runners/adding-self-hosted-runners
    runs-on: self-hosted
    environment:
      # 获取 CICD 中的变量: Context
      # https://docs.github.com/en/actions/learn-github-actions/expressions
      name: Deploy
      url: https://cra.deepjs.cn
    steps:
      # 切出代码，使用该 Action 将可以拉取最新代码
      - uses: actions/checkout@v3
      - name: Deploy
        run: docker-compose -f domain.docker-compose.yaml up --build -d domain
        env:
          COMMIT_REF_NAME: ${{ github.ref_name }}

  # 简单部署个人服务器
  # deployMyHost:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: deploy self host
  #       run: |
  #         ssh root@deepjs.cn "
  #           # 假设该仓库位于 ~/Documents 目录
  #           cd ~/Documents/deploy-example

  #           # 拉取最新代码
  #           get fetch origin master
  #           git reset --hard origin/master

  #           # 部署
  #           docker-compose up --build -d
  #         "


  # # 真实的工作环境
  # deployReal:
  #   # 该 JOB 在自建 Runner 中进行运行
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     # 构建镜像
  #     - run: docker build -t cra-deploy-app .

  #     # 推送镜像
  #     - run: docker push cra-deploy-app

  #     # 拉取镜像并部署，deploy 为一个伪代码命令，在实际项目中可使用 helm、kubectl
  #     - run: deploy cra-deploy-app .

  #     # 或者通过 kubectl 进行部署
  #     - run: kubectl apply -f app.yaml

  #     # 或者通过 helm 进行部署
  #     - run: helm install cra-app cra-app-chart

